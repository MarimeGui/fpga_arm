$date
	Tue Nov 12 17:29:59 2024
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ns
$end

$scope module sram1_tb $end
$var reg 1 ! clock $end
$var reg 1 " read_write $end
$var reg 32 # address [31:0] $end
$var reg 32 $ data_in [31:0] $end
$var wire 1 % data_out [31] $end
$var wire 1 & data_out [30] $end
$var wire 1 ' data_out [29] $end
$var wire 1 ( data_out [28] $end
$var wire 1 ) data_out [27] $end
$var wire 1 * data_out [26] $end
$var wire 1 + data_out [25] $end
$var wire 1 , data_out [24] $end
$var wire 1 - data_out [23] $end
$var wire 1 . data_out [22] $end
$var wire 1 / data_out [21] $end
$var wire 1 0 data_out [20] $end
$var wire 1 1 data_out [19] $end
$var wire 1 2 data_out [18] $end
$var wire 1 3 data_out [17] $end
$var wire 1 4 data_out [16] $end
$var wire 1 5 data_out [15] $end
$var wire 1 6 data_out [14] $end
$var wire 1 7 data_out [13] $end
$var wire 1 8 data_out [12] $end
$var wire 1 9 data_out [11] $end
$var wire 1 : data_out [10] $end
$var wire 1 ; data_out [9] $end
$var wire 1 < data_out [8] $end
$var wire 1 = data_out [7] $end
$var wire 1 > data_out [6] $end
$var wire 1 ? data_out [5] $end
$var wire 1 @ data_out [4] $end
$var wire 1 A data_out [3] $end
$var wire 1 B data_out [2] $end
$var wire 1 C data_out [1] $end
$var wire 1 D data_out [0] $end

$scope module UUT $end
$var wire 1 E clock $end
$var wire 1 F read_write $end
$var wire 1 G address [31] $end
$var wire 1 H address [30] $end
$var wire 1 I address [29] $end
$var wire 1 J address [28] $end
$var wire 1 K address [27] $end
$var wire 1 L address [26] $end
$var wire 1 M address [25] $end
$var wire 1 N address [24] $end
$var wire 1 O address [23] $end
$var wire 1 P address [22] $end
$var wire 1 Q address [21] $end
$var wire 1 R address [20] $end
$var wire 1 S address [19] $end
$var wire 1 T address [18] $end
$var wire 1 U address [17] $end
$var wire 1 V address [16] $end
$var wire 1 W address [15] $end
$var wire 1 X address [14] $end
$var wire 1 Y address [13] $end
$var wire 1 Z address [12] $end
$var wire 1 [ address [11] $end
$var wire 1 \ address [10] $end
$var wire 1 ] address [9] $end
$var wire 1 ^ address [8] $end
$var wire 1 _ address [7] $end
$var wire 1 ` address [6] $end
$var wire 1 a address [5] $end
$var wire 1 b address [4] $end
$var wire 1 c address [3] $end
$var wire 1 d address [2] $end
$var wire 1 e address [1] $end
$var wire 1 f address [0] $end
$var wire 1 g data_in [31] $end
$var wire 1 h data_in [30] $end
$var wire 1 i data_in [29] $end
$var wire 1 j data_in [28] $end
$var wire 1 k data_in [27] $end
$var wire 1 l data_in [26] $end
$var wire 1 m data_in [25] $end
$var wire 1 n data_in [24] $end
$var wire 1 o data_in [23] $end
$var wire 1 p data_in [22] $end
$var wire 1 q data_in [21] $end
$var wire 1 r data_in [20] $end
$var wire 1 s data_in [19] $end
$var wire 1 t data_in [18] $end
$var wire 1 u data_in [17] $end
$var wire 1 v data_in [16] $end
$var wire 1 w data_in [15] $end
$var wire 1 x data_in [14] $end
$var wire 1 y data_in [13] $end
$var wire 1 z data_in [12] $end
$var wire 1 { data_in [11] $end
$var wire 1 | data_in [10] $end
$var wire 1 } data_in [9] $end
$var wire 1 ~ data_in [8] $end
$var wire 1 !! data_in [7] $end
$var wire 1 "! data_in [6] $end
$var wire 1 #! data_in [5] $end
$var wire 1 $! data_in [4] $end
$var wire 1 %! data_in [3] $end
$var wire 1 &! data_in [2] $end
$var wire 1 '! data_in [1] $end
$var wire 1 (! data_in [0] $end
$var reg 32 )! data_out [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
b100000000000000000000000000000 #
b1001000110100010101100111 $
bz )!
zD
zC
zB
zA
z@
z?
z>
z=
z<
z;
z:
z9
z8
z7
z6
z5
z4
z3
z2
z1
z0
z/
z.
z-
z,
z+
z*
z)
z(
z'
z&
z%
1(!
1'!
1&!
0%!
0$!
1#!
1"!
0!!
1~
0}
1|
0{
0z
0y
1x
0w
1v
1u
0t
0s
0r
1q
0p
0o
1n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
1I
0H
0G
1F
0E
$end
#5
1!
1E
#10
0"
b10001000100010001000100010001 $
0!
0F
0'!
0&!
1$!
0#!
0"!
0|
1z
0x
0u
1r
0q
1j
0E
#15
1!
1E
b1001000110100010101100111 )!
1D
1C
1B
0A
0@
1?
1>
0=
1<
0;
1:
09
08
07
16
05
14
13
02
01
00
1/
0.
